name: Scan EVERYTHING (history + built site) for sensitive info

on:
  workflow_dispatch:
    inputs:
      custom_terms:
        description: 'Extra search terms (regex or plain), separated by |'
        required: false
        default: 'Barrington|Mississauga|L5V|manny|1442|1015|647|437'

permissions:
  contents: read

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout FULL history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure repo isnâ€™t shallow (fallback)
        run: |
          if git rev-parse --is-shallow-repository | grep -q true; then
            git fetch --unshallow --tags
          fi

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y exiftool ripgrep

      # ---------- Build the frontend so we can scan EXACT live files ----------
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Enable corepack (Yarn)
        run: corepack enable

      - name: Install deps (frontend)
        working-directory: frontend
        run: yarn install --frozen-lockfile || yarn install

      - name: Build (frontend)
        working-directory: frontend
        run: yarn build || npm run build

      - name: Detect build output dir
        id: detect
        run: |
          if [ -d frontend/build ]; then
            echo "dir=frontend/build" >> $GITHUB_OUTPUT
          elif [ -d frontend/dist ]; then
            echo "dir=frontend/dist" >> $GITHUB_OUTPUT
          else
            echo "No build output found (expected frontend/build or frontend/dist)" >&2
            exit 1
          fi

      # ---------- Scan GIT HISTORY for images + EXIF/GPS ----------
      - name: List all blobs in history
        run: git rev-list --objects --all > all_objects.txt

      - name: Filter image blobs from history
        run: |
          awk '{print $1, $2}' all_objects.txt | \
          grep -Ei ' (.*\.(jpg|jpeg|png|gif|webp|bmp|svg|tif|tiff))$' > image_blobs.txt || true

      - name: Extract EXIF (GPS) from historical images
        run: |
          mkdir -p _scan/history_imgs
          echo "blob_sha,path,GPSLatitude,GPSLongitude,GPSPosition,DateTimeOriginal,Make,Model" > exif_history.csv
          while read -r sha path; do
            [ -z "$path" ] && continue
            git cat-file -p "$sha" > "_scan/history_imgs/${sha}" || continue
            exiftool -n -csv \
              -GPSLatitude -GPSLongitude -GPSPosition -DateTimeOriginal -Make -Model \
              "_scan/history_imgs/${sha}" \
              | tail -n +2 | awk -v s="$sha" -v p="$path" 'BEGIN{FS=","; OFS=","} {print s,p,$1,$2,$3,$4,$5,$6}' >> exif_history.csv || true
          done < image_blobs.txt

      # ---------- Scan GIT HISTORY for sensitive text ----------
      - name: Search history for emails/phones/IPs/API-like and custom terms
        env:
          CUSTOM: ${{ github.event.inputs.custom_terms }}
        run: |
          # Patterns (tune as needed)
          EMAIL='[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}'
          PHONE='(\+?1[\s\-.]?)?\(?[2-9][0-9]{2}\)?[\s\-.]?[0-9]{3}[\s\-.]?[0-9]{4}'
          IPV4='\b([0-9]{1,3}\.){3}[0-9]{1,3}\b'
          API='(?i)(api[_\-]?key|secret|token|access[_\-]?key)[^A-Za-z0-9]?[:=][^ \n]{8,}'

          : > emails_history.txt
          : > phones_history.txt
          : > ips_history.txt
          : > apis_history.txt
          : > custom_history.txt

          COMMITS=$(git rev-list --all)

          # Using git grep across all commits
          git grep -I -n -E "$EMAIL" $COMMITS > emails_history.txt || true
          git grep -I -n -E "$PHONE" $COMMITS > phones_history.txt || true
          git grep -I -n -E "$IPV4" $COMMITS | grep -v -E '(^|[^0-9])127\.0\.0\.1|(^|[^0-9])0\.0\.0\.0|(^|[^0-9])255\.255\.255\.255' > ips_history.txt || true
          git grep -I -n -E "$API"   $COMMITS > apis_history.txt || true

          if [ -n "$CUSTOM" ]; then
            git grep -I -n -E "$CUSTOM" $COMMITS > custom_history.txt || true
          fi

      # ---------- Scan the BUILT SITE for sensitive text ----------
      - name: Scan built site for emails/phones/IPs/API-like and custom terms
        env:
          OUTDIR: ${{ steps.detect.outputs.dir }}
          CUSTOM: ${{ github.event.inputs.custom_terms }}
        run: |
          EMAIL='[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}'
          PHONE='(\+?1[\s\-.]?)?\(?[2-9][0-9]{2}\)?[\s\-.]?[0-9]{3}[\s\-.]?[0-9]{4}'
          IPV4='\b([0-9]{1,3}\.){3}[0-9]{1,3}\b'
          API='(?i)(api[_\-]?key|secret|token|access[_\-]?key)[^A-Za-z0-9]?[:=][^ \n]{8,}'

          : > emails_built.txt
          : > phones_built.txt
          : > ips_built.txt
          : > apis_built.txt
          : > custom_built.txt

          rg -INno --pcre2 "$EMAIL" "$OUTDIR" > emails_built.txt || true
          rg -INno --pcre2 "$PHONE" "$OUTDIR" > phones_built.txt || true
          rg -INno --pcre2 "$IPV4"  "$OUTDIR" | grep -v -E '(^|[^0-9])127\.0\.0\.1|(^|[^0-9])0\.0\.0\.0|(^|[^0-9])255\.255\.255\.255' > ips_built.txt || true
          rg -INno --pcre2 "$API"   "$OUTDIR" > apis_built.txt || true

          if [ -n "$CUSTOM" ]; then
            rg -INno --pcre2 "$CUSTOM" "$OUTDIR" > custom_built.txt || true
          fi

      # ---------- EXIF/GPS scan for images inside the built site ----------
      - name: EXIF scan of built images
        env:
          OUTDIR: ${{ steps.detect.outputs.dir }}
        run: |
          echo "path,GPSLatitude,GPSLongitude,GPSPosition,DateTimeOriginal,Make,Model" > exif_built.csv
          find "$OUTDIR" -type f \( -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.tif' -o -iname '*.tiff' -o -iname '*.png' -o -iname '*.gif' -o -iname '*.webp' \) -print0 \
            | xargs -0 -I{} exiftool -n -csv -GPSLatitude -GPSLongitude -GPSPosition -DateTimeOriginal -Make -Model "{}" \
            | tail -n +2 >> exif_built.csv || true

      # ---------- Package the built site itself (so you can share it for review) ----------
      - name: Archive built site
        run: |
          tar -czf site-build.tar.gz "${{ steps.detect.outputs.dir }}"

      # ---------- Upload artifacts (download these from the run page) ----------
      - name: Upload HISTORY scan reports
        uses: actions/upload-artifact@v4
        with:
          name: history-scan
          path: |
            exif_history.csv
            emails_history.txt
            phones_history.txt
            ips_history.txt
            apis_history.txt
            custom_history.txt
          compression-level: 0

      - name: Upload BUILT SITE scan reports
        uses: actions/upload-artifact@v4
        with:
          name: built-scan
          path: |
            exif_built.csv
            emails_built.txt
            phones_built.txt
            ips_built.txt
            apis_built.txt
            custom_built.txt
          compression-level: 0

      - name: Upload BUILT SITE files
        uses: actions/upload-artifact@v4
        with:
          name: site-build
          path: site-build.tar.gz
          compression-level: 0
